@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData


<h3>Sample Data</h3>
@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories </button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-info" @onclick="CreateStatuses">Create Statuses </button>
}

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Albert",
                LastName = "Cardona",
                EmailAddress = "sample@email.com",
                DisplayName = "sampleAl",
                ObjectIndentifier = "abc-123"
            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-132");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Our first suggestion",
                Description = " this is a fake suggestion sample "
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our second suggestion",
                Description = " this is a fake suggestion sample 2",
                SuggestionStatus = statuses[0],
                OwnerNotes = "Thisis the note for the sample status"

            };

        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our third suggestion",
                Description = " this is a fake suggestion sample 3",
                SuggestionStatus = statuses[2],
                OwnerNotes = "Thisis the note for the sample status"

            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our other suggestion",
                Description = " this is a fake suggestion sample 4",
                SuggestionStatus = statuses[3],

                OwnerNotes = "Thisis the note for the sample status"

            };
        await suggestionData.CreateSuggestion(suggestion);
        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our other suggestion",
                Description = " this is a fake suggestion sample 5",
                SuggestionStatus = statuses[3],
                OwnerNotes = "Thisis the note for the sample status"

            };
        await suggestionData.CreateSuggestion(suggestion);

    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Full Paid Courses."

            };
        await categoryData.CreateCategory(cat);
        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on beign a developer."
            };
        await categoryData.CreateCategory(cat);
        cat = new()
            {
                CategoryName = "In-Depth Tutorials",
                CategoryDescription = "A deep dive video on how to use a topic"
            };
        await categoryData.CreateCategory(cat);
        cat = new()
            {
                CategoryName = "10 Minute traingin",
                CategoryDescription = "A quick \"How do I do this?\" video"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure where this fits in?"
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();
        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The suggestions was accepted and the corresponding item was created "
            };

        await statusData.CreateStatuses(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion is interesting. We are watching to see how much interest there is in it. "
            };

        await statusData.CreateStatuses(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon."
            };

        await statusData.CreateStatuses(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The suggestion was not something that we are going to undertake."
            };

        await statusData.CreateStatuses(stat);

        statusesCreated = true;
    }
}
